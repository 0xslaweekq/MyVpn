# Оптимальная конфигурация PipeWire для ноутбука
# Настройки для Intel Alder Lake PCH-P HD Audio + NVIDIA GA104

context.properties = {
    ## Configure properties in the system.
    #mem.warn-mlock  = false
    #mem.allow-mlock = true
    #mem.mlock-all   = false
    log.level = 2

    #core.daemon = true
    #core.name   = pipewire-0

    ## Properties for the DSP configuration.
    default.clock.rate       = 48000
    default.clock.quantum    = 1024
    default.clock.min-quantum = 32
    default.clock.max-quantum = 8192
    #default.clock.quantum-limit = 8192

    # Настройки для ноутбука - экономия энергии
    default.video.width   = 640
    default.video.height  = 480
    default.video.rate.num = 25
    default.video.rate.denom = 1

    # Оптимизация для Intel HDA
    #settings.check-quantum  = false
    #settings.check-rate     = false

    # Настройки для лучшего качества звука
    #link.max-buffers      = 16
    core.daemon           = true
    core.name             = pipewire-0

    # Энергосбережение
    support.dbus          = true
}

context.spa-libs = {
    #<factory-name regex> = <library-name>
    #
    # Used to find spa factory names. It maps an spa factory name
    # regular expression to a library name that should contain
    # that factory.
    #
    audio.convert.* = audioconvert/libspa-audioconvert
    avb.*           = avb/libspa-avb
    api.alsa.*      = alsa/libspa-alsa
    api.v4l2.*      = v4l2/libspa-v4l2
    api.libcamera.* = libcamera/libspa-libcamera
    api.bluez5.*    = bluez5/libspa-bluez5
    api.vulkan.*    = vulkan/libspa-vulkan
    api.jack.*      = jack/libspa-jack
    support.*       = support/libspa-support
}

context.modules = [
    #{ name = <module-name>
    #    ( args  = { <key> = <value> ... } )
    #    ( flags = [ <flag> ... ] )
    #    ( condition = [ { <key> = <value> ... } ... ] )
    #}
    #
    # Loads a module with the given parameters.
    # - module-name is the name of the module to load.
    # - args is optional
    # - flags is optional
    # - condition is optional
    #
    # Flags can be one of: [ ifexists nofail ]
    #
    # ifexists: Load the module only when it exists
    # nofail:   Don't fail if the module can't be loaded.
    #
    # condition is a list of { <key> = <value> ... } objects. All of them must
    # match before loading the module. <key> can be a context property or a
    # PipeWire property for the condition to match.

    # Uses realtime scheduling to boost the audio thread priorities. This uses
    # RTKit if available.
    { name = libpipewire-module-rt
        args = {
            nice.level   = -11
            #rt.prio      = 88
            #rt.time.soft = -1
            #rt.time.hard = -1
        }
        flags = [ ifexists nofail ]
    }

    # The native communication protocol.
    { name = libpipewire-module-protocol-native }

    # The profile module. Allows application to access profiler
    # and performance data. It provides an interface that is used
    # by pw-profiler.
    { name = libpipewire-module-profiler }

    # Allows applications to create metadata objects. It creates
    # a factory for Metadata objects.
    { name = libpipewire-module-metadata }

    # Creates a factory for making devices that run in the
    # context of the PipeWire server.
    { name = libpipewire-module-spa-device-factory }

    # Creates a factory for making nodes that run in the
    # context of the PipeWire server.
    { name = libpipewire-module-spa-node-factory }

    # Allows creating nodes that run in the context of the
    # client. Is used by all clients that want to provide
    # data to PipeWire.
    { name = libpipewire-module-client-node }

    # Allows creating devices that run in the context of the
    # client. Is used by the session manager.
    { name = libpipewire-module-client-device }

    # The portal module monitors the PID of the portal process
    # and tags connections with "portal.pid" metadata.
    { name = libpipewire-module-portal
        flags = [ ifexists nofail ]
    }

    # The access module can perform access checks and block
    # new clients.
    { name = libpipewire-module-access
        args = {
            # access.allowed to list an array of paths of allowed
            # apps.
            #access.allowed = [
            #    /usr/bin/pipewire-media-session
            #]

            # An array of rejected paths.
            #access.rejected = [ ]

            # An array of paths with restricted access.
            #access.restricted = [ ]

            # Anything not in the above lists gets assigned the
            # access.force permission.
            #access.force = flatpak
        }
    }

    # Makes a factory for wrapping nodes in an adapter with a
    # converter and resampler.
    { name = libpipewire-module-adapter }

    # Makes a factory for creating links between ports.
    { name = libpipewire-module-link-factory }

    # Provides factories to make session manager objects.
    { name = libpipewire-module-session-manager }

    # Use libpulse-simple and libpulse directly.
    #{ name = libpipewire-module-pulse-tunnel }

    # Tunnel to remote PipeWire instance.
    #{ name = libpipewire-module-tunnel }

    # Zeroconf publish/discover.
    #{ name = libpipewire-module-zeroconf-discover }
    #{ name = libpipewire-module-raop-discover }

    # Load something into the filter chain if there is no other
    # way to connect it
    #{ name = libpipewire-module-fallback-sink }

    # Use latest D-Bus jackdbus protocol when in proximity to JACK apps
    { name = libpipewire-module-jackdbus-detect
        args = {
            #jackdbus.connect = false
            #jackdbus.merge-monitor = false
        }
        flags = [ ifexists nofail ]
    }
]

context.objects = [
    #{ factory = <factory-name>
    #    ( args  = { <key> = <value> ... } )
    #    ( flags = [ <flag> ... ] )
    #    ( condition = [ { <key> = <value> ... } ... ] )
    #}
    #
    # Creates an object from a PipeWire factory with the given parameters.
    # If args is not specified, an empty property set is used.
    #
    # See context.modules for the meaning of condition and flags.

    #{ factory = adapter
    #    args = {
    #        factory.name     = audiotestsrc
    #        node.name        = my-test
    #        node.description = "My Test Source"
    #        media.class      = "Audio/Source"
    #        audio.format     = "S16LE"
    #        audio.rate       = 48000
    #        audio.channels   = 2
    #        audio.position   = "FL,FR"
    #        adapt.follower   = ""
    #        stream.props     = {
    #            node.autoconnect = true
    #        }
    #    }
    #}
]

context.exec = [
    #{ path = <program-name>
    #    ( args = "<arguments>" )
    #    ( condition = [ { <key> = <value> ... } ... ] )
    #}
    #
    # Execute the given program with arguments.
    #
    # See context.modules for the meaning of condition.
]
